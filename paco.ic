
	#include <stdio.h>
	#include <string.h>
	#include <math.h>
	
	#include <portaudio.h>

	#define SR 48000
	#define FR 1000

	double t = 0.1

	PaStreamCallbackResult proc(
		const void *input,
		void *output,
		unsigned long frameCount,
		const PaStreamCallbackTimeInfo *timeInfo,
		PaStreamCallbackFlags statusFlags,
		void *tt )
		
		double * ttt =  (double *)tt;
		float *out = (float*) output
    
		for( int i=0; i<frameCount; i++ )
			*out++ = (float) sin( FR * M_PI * (*ttt) * (*ttt) *2 )
			*out++ = (float) sin( FR * M_PI * (*ttt) * (*ttt+0.1) *2 )
			*ttt += 1.0/((double)SR)
	
		return paContinue;

	int main( int argc, char* argv[] )

		if( argc != 3 )
			printf( "tell me 2 args: api and dev" )
			return 1
			
		PaError err
		
		err = Pa_Initialize()
		if( err != paNoError )
			printf( "ERROR: Pa_Initialize returned 0x%x\n", err )
			return 1

		int dev_count = Pa_GetDeviceCount()
		if( dev_count <= 0 )
			printf( "ERROR: dev count <= 0" )
		
		const PaHostApiInfo * api
		const PaDeviceInfo * dev
		int dev_id
		
		for( int i=0; i<=dev_count; i++ )
			if( i == dev_count )
				printf( "ERROR: %s %s Not Found\n", argv[1], argv[2] )
				return 1
			dev_id = i
			dev = Pa_GetDeviceInfo( dev_id )
			api = Pa_GetHostApiInfo( dev->hostApi )
			if( !strcmp( api->name, argv[1] ) && !strcmp( dev->name, argv[2] ) )
				printf( "Dev # %d\n", dev_id )
				break

		PaStreamParameters output
		output.device = dev_id
		output.channelCount = 2
		output.sampleFormat = paFloat32
		output.hostApiSpecificStreamInfo = 0
		output.suggestedLatency = 0.01
		
		PaStream *stream = NULL
		err = Pa_OpenStream( &stream, NULL, &output, SR, paFramesPerBufferUnspecified, paClipOff, &proc, &t )
		if( err != paNoError )
			if( err == paUnanticipatedHostError )
				const PaHostErrorInfo* herr = Pa_GetLastHostErrorInfo()
				printf( "ERRORh: %s", herr->errorText )
			else
				printf( "ERROR: %s\n", Pa_GetErrorText( err ) )

		err = Pa_StartStream( stream )
		if( err != paNoError )
			printf( "ERROR: %s\n", Pa_GetErrorText( err ) )

		Pa_Sleep(1000)
		
		Pa_Terminate()
		return 0
